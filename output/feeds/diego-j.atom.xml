<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Diego J's on Software Engineering Research</title><link href="/" rel="alternate"></link><link href="/feeds/diego-j.atom.xml" rel="self"></link><id>/</id><updated>2015-07-27T23:00:00+02:00</updated><entry><title>Managing clients</title><link href="/posts/2015/07/managing-clients/" rel="alternate"></link><updated>2015-07-27T23:00:00+02:00</updated><author><name>Diego J.</name></author><id>tag:,2015-07-27:posts/2015/07/managing-clients/</id><summary type="html">&lt;h1&gt;The Players&lt;/h1&gt;
&lt;p&gt;It's not a secret that software engineers prefer a clean and completed specification than metting with clients.&lt;/p&gt;
&lt;p&gt;We tend to think that meetings are a waste of time and many of our colleagues are not very fond of what is called &lt;a href="https://en.wikipedia.org/wiki/Soft_skills"&gt;soft skills&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;On the other side, we have some clients that have no idea about software and want the changes in their platform now.&lt;/p&gt;
&lt;p&gt;What is all of that? Let me tell you, a recipe for the disaster. &lt;/p&gt;
&lt;h1&gt;The Setting&lt;/h1&gt;
&lt;p&gt;Let's add some extra complexity. The project you have assigned to has no documentation and has a high &lt;a href="https://en.wikipedia.org/wiki/Technical_debt"&gt;technical debt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The client is not cooperating and is impatient...&lt;/p&gt;
&lt;p&gt;What do you do?&lt;/p&gt;
&lt;h1&gt;The Solution&lt;/h1&gt;
&lt;h2&gt;Technical solution&lt;/h2&gt;
&lt;p&gt;The technical debt problem needs to be resolved, how? Analyzing the current system: what does (software requirements) and how does it (software design).&lt;/p&gt;
&lt;h2&gt;Cliente managing&lt;/h2&gt;
&lt;p&gt;The client feels lied by its older outsourcing company, he/she needs a special treatment. How can we give him/her that?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can we make our client feel safe with working with us?&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;We have to guide our clients&lt;/h3&gt;
&lt;p&gt;One of the most successful aspects of Agile development is the change of developers-cliente relationship.&lt;/p&gt;
&lt;p&gt;We must be the calendar, reminder and notifier of the client. We define when we are going to end our sprints and deliver the software modules to be validated by our client.&lt;/p&gt;
&lt;h3&gt;Clients are limited&lt;/h3&gt;
&lt;p&gt;Don't suppose any knowledge.&lt;/p&gt;
&lt;p&gt;The client can be wise in his/her field (many times it is not) but doesn't know anything about software.&lt;/p&gt;
&lt;p&gt;We should talk in a simple vocabulary, explaining the concepts, making metaphors and real like comparisons to achieve his/her complete understanding.&lt;/p&gt;
&lt;h3&gt;Clients have needs but ask for changes&lt;/h3&gt;
&lt;p&gt;Clients have background needs because of business or personal requirements but they express them in form of "changes" in the software, even telling us how to do the changes.&lt;/p&gt;
&lt;p&gt;We should know these base needs instead of the particular changes, because most of the time, things can be done easily or better.&lt;/p&gt;
&lt;h3&gt;Don't lose control&lt;/h3&gt;
&lt;p&gt;Clients can be disrespectful, condescending or can be tyrannical. &lt;/p&gt;
&lt;p&gt;We are engineers, we must be assertive, defend our integrity as humans but we must &lt;em&gt;not&lt;/em&gt; attack the client.&lt;/p&gt;
&lt;p&gt;Technology makes people feel vulnerable, specially illiterate people, so they tend to show this feeling as anger or other unpleasant emotions.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;We don't work &lt;em&gt;for&lt;/em&gt; a client, we work &lt;em&gt;with&lt;/em&gt; a client.&lt;/p&gt;
&lt;p&gt;Many times a conversation can avoid developing new features that won't be used or the cancelation of the project.&lt;/p&gt;
&lt;p&gt;Soft skills are important, yes, even for an engineer. You will have mettings with clients, so practice your "human" abilities.&lt;/p&gt;</summary><category term="clients"></category><category term="software engineering"></category><category term="people"></category><category term="project management"></category></entry><entry><title>Real Software Architecture</title><link href="/posts/2015/03/real-software-architecture/" rel="alternate"></link><updated>2015-03-03T21:53:00+01:00</updated><author><name>Diego J.</name></author><id>tag:,2015-03-03:posts/2015/03/real-software-architecture/</id><summary type="html">&lt;p&gt;Simon Brown is an independent software consultant from Jersey (UK) and gave this talk
about Software Architecture in GOTO Amsterdam 2014.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=GAFZcYlO5S0"&gt;&lt;img alt="Software Architecture vs. Code GOTO 2014 talk" src="http://img.youtube.com/vi/GAFZcYlO5S0/0.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk delights me in several ways. First, Simon show us several common problems that happens in
many software companies: diagrams of the software are not synchronized with code because.
That is, we design some type of software architecture but we don't follow our own path when
coding.&lt;/p&gt;
&lt;p&gt;He thinks (me too) that software diagram current methodologies are difficult and
not &lt;em&gt;pleasant&lt;/em&gt; (I would say) to use. We continue to theorize about perfect software
designs but when we make the code we simply don't take them in consideration.&lt;/p&gt;
&lt;p&gt;This way, he shows a software architecture model that enfatizes the communication inside
the team and with stakeholders. Thus, the most important thing is that these diagrams
can be the &lt;em&gt;actual plan&lt;/em&gt; of the code of the project and with his guidelines we can have no
discrepancies between software architecture and code organization and structure. &lt;/p&gt;
&lt;p&gt;Simon has published a very &lt;a href="https://leanpub.com/software-architecture-for-developers/"&gt;interesting book&lt;/a&gt; I plan to read.
I'll update this post in the future when I read it.&lt;/p&gt;
&lt;p&gt;Go, watch the video and think about this problem.&lt;/p&gt;</summary><category term="talk"></category><category term="software engineering"></category><category term="videotalk"></category><category term="software architecture"></category></entry><entry><title>Back to basics, the mythical man-month</title><link href="/posts/2014/11/back-to-basics-the-mythical-man-month/" rel="alternate"></link><updated>2014-11-04T21:00:00+01:00</updated><author><name>Diego J.</name></author><id>tag:,2014-11-04:posts/2014/11/back-to-basics-the-mythical-man-month/</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Fred_Brooks"&gt;Frederick P. Brooks&lt;/a&gt; is what I'd call a true pioneer.&lt;/p&gt;
&lt;p&gt;Without any existing knowledge and only his own experience in the "tar pit" (as himself call this software development world), he distilled some universal truths of the Software Engineering world. So, the Mythical Man-Month is a summary of his ideas.&lt;/p&gt;
&lt;p&gt;This book is a night stand book, that is, you cannot hope to end it in a few days. You have to read slowly, thinking as a 60s software developer, with their limited tools and machines to fully understand this book.&lt;/p&gt;
&lt;p&gt;Its content can be seen as obvious, but is interesting seeing the thought process that made the bases of what we call now Software Engineering. Things like how to plan a software project, team specialization, the use of high languages over efficiency, a strict and well-done documentation, etc. are described with some detail in the book with real world examples of Brooks or men of his time.&lt;/p&gt;
&lt;p&gt;Of course many readers stop reading after ending chapter 2 where the author explains that software projects are different compared to other projects because you cannot increase development speed introducing more members to the developing team. You'll need to teach them the project internals, increasing the overall time cost of the project. But I think every chapter has its teaching.&lt;/p&gt;
&lt;p&gt;For example, in chapter 3, "The surgical team", Brooks compares a surgical team where every member has a specialized tasks to his idea of software developing team. Nowadays it is very common to see many jobs for "full-stack developers", what in my opinion is completely mistaken. You cannot expect to be fully competent in dozens of disciplines (and technologies).&lt;/p&gt;
&lt;p&gt;Other interesting chapter for me is "The documentary hypothesis" where Brooks defends the idea of having formal documents for each project like objetives, specifications, schedule, etc. In the agile startup world this is simply wasted time, the old idea of "only the code is what is important" has returned very strong this days because of the culture of skyrocketing your career and rockstar programmer. This two ideas are a bit na√Øve and against the software engineering principles of software quality and maintainability.&lt;/p&gt;
&lt;p&gt;The last thing I want to note about this book is that Brooks even defines the two careers in the software world: programmers and management. Where many people see both of them as oposite careers, Brooks sees them as complementary positions of the organization but encouraging employees to stay in "the technical ladder" by paying them more. Yes, take a look to chapter "Plan the organization for a change".&lt;/p&gt;
&lt;p&gt;To conclude this post, Brooks' book is a window to the past that teach us many principles of Software Engineering with real examples. I recommend its lecture to every undergraduate student of Computer Science or Software Engineering degrees. Many of the problems of nowadays software developing organizations can be seen in this book pages. I encourage every software developer or software engineer to read this book and learn the basic principles of Software Engineering.&lt;/p&gt;</summary><category term="books"></category><category term="software engineering"></category><category term="startup"></category></entry><entry><title>Welcome</title><link href="/posts/2014/10/welcome/" rel="alternate"></link><updated>2014-10-01T21:00:00+02:00</updated><author><name>Diego J.</name></author><id>tag:,2014-10-01:posts/2014/10/welcome/</id><summary type="html">&lt;p&gt;For anyone not knowing me, I‚Äôm a software engineer working in a startup in south Spain.&lt;/p&gt;
&lt;p&gt;In 2014 I ended my Software Engineering Research Masters Program and not satisfied with what I‚Äôve learned, I‚Äôm going to continue my research in this field.&lt;/p&gt;
&lt;p&gt;This blog is going to be my notebook in this amazing trip.&lt;/p&gt;
&lt;p&gt;Please, note that this blogs only reflect my personal opinions and views, it does &lt;em&gt;not&lt;/em&gt; reflect the views of my past, present or future employers.&lt;/p&gt;</summary><category term="welcome"></category><category term="test"></category></entry></feed>