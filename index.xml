<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Diego J.'s Software Tar Pit</title><link>https://diegojromerolopez.github.io/</link><description>Recent content on Diego J.'s Software Tar Pit</description><generator>Hugo -- gohugo.io</generator><managingEditor>diegojromerolopez@gmail.com (Diego J. Romero-López)</managingEditor><webMaster>diegojromerolopez@gmail.com (Diego J. Romero-López)</webMaster><lastBuildDate>Sat, 25 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://diegojromerolopez.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>The world is full of irrational people</title><link>https://diegojromerolopez.github.io/blog/2025/01/the-world-is-full-of-irrational-people/</link><pubDate>Sat, 25 Jan 2025 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2025/01/the-world-is-full-of-irrational-people/</guid><description>The world is full of irrational people Recently I took a personality test where I ended up being classified as an analytical person, and I am that indeed. How can I thrive in a world where the critical thinking and the rationality are being attacked everyday?
Irrational people in software development Our profession, software development, is full of irrational people.
First of all, we do not work in Science, and in software development there are multiple ways of do the same thing.</description></item><item><title>10 years of this blog</title><link>https://diegojromerolopez.github.io/blog/2024/12/10-years-of-this-blog/</link><pubDate>Sun, 29 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/10-years-of-this-blog/</guid><description>10 years of this blog I have been blogging about software and technology in this blog for a decade. What was the rationale of this blog? Why should you write a technical blog?
How it all started I started blogging in 2014, when I was improving my skills via a Masters Program. I was a bit burned out because studying and working at the same time require an energy I did not have during that time.</description></item><item><title>How to create a Dockerfile for your deno fresh project</title><link>https://diegojromerolopez.github.io/blog/2024/12/how-to-create-a-dockerfile-for-your-deno-fresh-project/</link><pubDate>Sat, 28 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/how-to-create-a-dockerfile-for-your-deno-fresh-project/</guid><description>How to create a Dockerfile for your deno fresh project Sometimes creating a Dockerfile is an art, you need to be aware of what files include in each layer to leverage the docker cache. How can we do this with deno fresh?
Recommended or usual Dockerfile Most of the examples I have found in the internet (like this one) tend to copy all the files in the same Docker instruction:</description></item><item><title>How to add OTEL to your deno fresh project</title><link>https://diegojromerolopez.github.io/blog/2024/12/how-to-add-otel-to-your-deno-fresh-project/</link><pubDate>Fri, 27 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/how-to-add-otel-to-your-deno-fresh-project/</guid><description>How to add OTEL to your deno fresh project OpenTelemetry is a standard for adding telemetry to your application. There are a myriad of implementations for almost all the programming languages. But you need to be aware that the particularities of each language can make integrating with OTEL very different in one case or other.
Introduction This post assumes you know what observability is, the best practices and the bare minimum that is accepted nowadays in modern applications.</description></item><item><title>Faulty engineering career ladders</title><link>https://diegojromerolopez.github.io/blog/2024/12/faulty-engineering-career-ladders/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/faulty-engineering-career-ladders/</guid><description>Faulty engineering career ladders Introduction Let&amp;rsquo;s see several issues with the Engineering ladders I have seen on my 16 years of experience.
This is a long post, I do not recommend reading it in one sitting.
Faulty engineering ladders Most companies I worked for had some kind of Engineering ladder. It looks nice and promising to know that you can be promoted. However, in my experience there is no clear path for promotion.</description></item><item><title>How to write a simple middleware in deno fresh</title><link>https://diegojromerolopez.github.io/blog/2024/12/how-to-write-a-simple-middleware-in-deno-fresh/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/how-to-write-a-simple-middleware-in-deno-fresh/</guid><description>How to write a simple middleware in deno fresh Middlewares are layers that inject data or check the HTTP request and are used by a set of routes. They are very useful as they group functionality together. Let&amp;rsquo;s see how to implement a middleware in deno fresh.
Select the routes the middleware is going to affect The middlewares in deno fresh are created inside a _middleware.ts file. This file will affect the routes that are from its level to the bottom.</description></item><item><title>The different types of personality</title><link>https://diegojromerolopez.github.io/blog/2024/12/the-different-types-of-personality/</link><pubDate>Wed, 25 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/the-different-types-of-personality/</guid><description># The different types of personality There are several frames that try to define the different types of personality (without any kind of particular order):
Surrounded by idiots C-me colour profiling Disc profiles The four tendencies What are those? Several psychology researchers have determined that people can be grouped based on 4 personality profiles.
Mainly they define the following dimensions:
Analytical Dominant Social/Leader Cooperative How do they affect your communication?</description></item><item><title>Leadership with passive subjects</title><link>https://diegojromerolopez.github.io/blog/2024/12/leadership-with-passive-subjects/</link><pubDate>Tue, 24 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/leadership-with-passive-subjects/</guid><description>Leadership with passive subjects Most leadership advice (that I have read) assumes all the team members are motivated and want to improve themselves. However, what about the opposite? What can happen when a developer is not interested in improve their skills and is dragging down the team?
Along this post we will delve on the subject of what to do when you have to lead over different types of developers.</description></item><item><title>CV Driven Development</title><link>https://diegojromerolopez.github.io/blog/2024/12/cv-driven-development/</link><pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/cv-driven-development/</guid><description>CV Driven Development CV Driven Development or Resume Driven Development consist on taken strategic decisions based on how they improve the CV of the developers that work on that project.
Introduction Most of the project management methodologies have a focus on improving the satisfaction of the clients and users. Most of the time by removing friction between them and the development process, or by reducing waste.
CV Driven Development has as one of the non-functional requirements learning something new.</description></item><item><title>War stories</title><link>https://diegojromerolopez.github.io/blog/2024/12/war-stories/</link><pubDate>Fri, 20 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/war-stories/</guid><description>War stories When talking about software documentation we usually describe the what and how, but explaining the reason (why) is it left out. Giving a background about why the team took some decisions can help developers understand better why the software is the way it is.
Documentation is a foundational part of software I would say that nobody doubts that a piece os software without documentation is not useful. Software can have a big complexity and maintaining it and extend it can be hard if there is no guide.</description></item><item><title>The runtime type-checking operator in TypeScript</title><link>https://diegojromerolopez.github.io/blog/2024/12/the-runtime-type-checking-operator-in-typescript/</link><pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/the-runtime-type-checking-operator-in-typescript/</guid><description>The runtime type-checking operator in TypeScript I have been working with TypeScript for a while but for sure I am not an expert in the language (I feel more comfortable with Python).
I like the idea of type-safe but limiting the static type checking process can make you confident about what you are getting from outside sources, and if you do not trust those sources (you should NOT), you would need to include a lot of repetitive checks any time we read data from the outside.</description></item><item><title>Don't use singletons</title><link>https://diegojromerolopez.github.io/blog/2024/11/dont-use-singletons/</link><pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/11/dont-use-singletons/</guid><description>Don&amp;rsquo;t use singletons The Singleton pattern is one of the patterns that appeared in the Design Patterns book by Erich Gamma et al..
What is a singleton? The singleton is one design patter to share a resource in a controlled manner in a code base. That resource could be a configuration, a connection or any other global state that should be unique.
How to implement it? There are several ways to implement this, but in Python (for example) you can implement it by making use of the Python metaclasses.</description></item><item><title>My experience in a Platform team</title><link>https://diegojromerolopez.github.io/blog/2024/10/my-experience-in-a-platform-team/</link><pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/10/my-experience-in-a-platform-team/</guid><description>My experience in a platform team This post is going to summarize the main points of my experience while working in a Platform/Productivity team for two years. I also worked as platform engineer many years ago and I have always been eager to create tools that help other engineers.
Giving support is a hard task Developers do not care about the platform their sofware runs, they intend to developed features that product teams require, I mean that is what they should do as developers need to provide value to the company (no question on that).</description></item><item><title>The long silence</title><link>https://diegojromerolopez.github.io/blog/2024/09/the-long-silence/</link><pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/09/the-long-silence/</guid><description>The long silence It has been some months since I wrote here for the last time. Why have I been silent all this time? I could say that life matters have made me pretty busy (and that is true), but apart from that, what things have I been working on?
Things I worked with Deno Deno, the next-generation JavaScript runtime created by Ryan Dahl, the Node.js creator.
It think it is a great idea but it has some rough edges, let&amp;rsquo;s hope that with the coming of Deno 2 and the full support for commonJS modules and other new features it can achieve the status it deserves.</description></item><item><title>Troubleshooting guides</title><link>https://diegojromerolopez.github.io/blog/2024/02/troubleshooting-guides/</link><pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/02/troubleshooting-guides/</guid><description>Troubleshooting guides Usually software is considered only to be code that is executable, sometimes the documentation is also considered part of software, but are the troubleshooting guides part of software? Are these rulebooks useful for the team that uses, maintains, develop or support the software?
What is a troubleshooting guide? A troubleshooting guide is a rulebook or more explained a collection of items that should help the users navigate through the issues that could happen.</description></item><item><title>New Year's resolutions</title><link>https://diegojromerolopez.github.io/blog/2024/01/new-years-resolutions/</link><pubDate>Sat, 27 Jan 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/01/new-years-resolutions/</guid><description>New Year&amp;rsquo;s resolutions This new year has just started (well 27 days ago), but I have been thinking about what I would like to learn and change during this 2024. Here are my personal thoughts on the matter. I hope they could inspire you to do a similar list.
What I would like to learn Tech Domain Driven Design Code bases I have worked on in my career tend to have some tech debt, and the code structure is very different depending on the developer that created the code.</description></item><item><title>Do what the community does</title><link>https://diegojromerolopez.github.io/blog/2023/12/do-what-the-community-does/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/12/do-what-the-community-does/</guid><description>Do what the community does The other day I had a conversation with a team mate about how to implement different patterns to solve a common issue in a interpreted programming language. He was sugesting using a pattern not used at all by the community that indeed was a cool, interesting, and we could argue that it was a more correct one. I was against that.
Humans are gregarious and tend to form communities &amp;hellip; even programming language communitites!</description></item><item><title>Corporate empathy</title><link>https://diegojromerolopez.github.io/blog/2023/12/corporate-empathy/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/12/corporate-empathy/</guid><description>Corporate empathy In this times of diversity based on gender, ethnical background, culture, etc. Is that enough? Do we have to be careful when talking with other coworker if they do not belong to any of the main categories? Can we say what we would like and in the way we would like? No, we need to treat them empthically.
Communication in the workplace When in every day job, we need to communicate with our coworkers.</description></item><item><title>Rambos</title><link>https://diegojromerolopez.github.io/blog/2023/12/rambos/</link><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/12/rambos/</guid><description>Rambos A one-person army, alone, in the jungle of software, fighting against the peskiest, complex, and soul-eating bugs. He (or she) can work for hours, with a tenacity of a human-hunter machine coming from the future, and his value is sometimes considered 10 times the standard engineer. Your organization depends on this individual. You cross your fingers and pray to your deity to not make you loss this prolific, highly-valued and know-it-all individal contributor.</description></item><item><title>What is your constraint? Mine is anti-work</title><link>https://diegojromerolopez.github.io/blog/2023/11/what-is-your-constraint-mine-is-anti-work/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/11/what-is-your-constraint-mine-is-anti-work/</guid><description>What is your constraint? Mine is anti-work We, as engineers, not only are worried about creating new things, we need to be able to detect the cause of future issues. However, we must not limit ourselves to software, but to the entire software development team organization.
How it all started: The Phoenix Project I was reading the other day the book &amp;ldquo;The Phoenix Project&amp;rdquo;, and while the book is a good read, I was geting bored.</description></item><item><title>Don't touch that</title><link>https://diegojromerolopez.github.io/blog/2023/10/dont-touch-that/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/10/dont-touch-that/</guid><description>Don&amp;rsquo;t touch that Have you ever been told &amp;ldquo;don&amp;rsquo;t touch that, if you modify that piece of code you are going to break anything&amp;rdquo;? How did you react to this comment? Did you feel &amp;ldquo;attacked&amp;rdquo; or simply ignored that piece of advice?
Code jungle Starting a working on a project that has some dark corners is a daunting task but following some guidelines can be useful.
Scary code There is always some scary code, I do not mean code that is difficult to understand, but code that has unintended consequences if modified.</description></item><item><title>Misconceptions about code comments</title><link>https://diegojromerolopez.github.io/blog/2023/09/misconceptions-about-code-comments/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/09/misconceptions-about-code-comments/</guid><description>Misconceptions about code comments I have been working in this industry since 2008, and it seems an idea is spreading through software companies: code comments are considered harmful. Is that true?
Where did all start? I think that this idea started with the Clean Code book and the subsequent talks by Robert C. Martin.
Uncle Bob (as people use to call him), has the idea that code should be self-explanatory, and if there is a comment, it is because code is not well structured.</description></item><item><title>How to manage docker secrets</title><link>https://diegojromerolopez.github.io/blog/2023/08/how-to-manage-docker-secrets/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/08/how-to-manage-docker-secrets/</guid><description>How to manage docker secrets The product that is produced by most software developer teams is a docker image. How can be sure that we are not leaking secrets in docker images? If we include them as building arguments for sure they are going to be stored in the own image. Is there any way to avoid having them inside the docker image?
Introduction Suppose you have a docker image that requires a secret, you do not want to include it in the image, but you need during the process of building the image.</description></item><item><title>Software engineer, programmer or wizard</title><link>https://diegojromerolopez.github.io/blog/2023/06/software-engineer-programmer-or-wizard/</link><pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/06/software-engineer-programmer-or-wizard/</guid><description>Software engineer, programmer or wizard Introduction I have been named many things (with respect to my profession) some of them were not actually correct. Should I correct people? Should I be worried about this?
Naming They say that naming something creates it. Does being called a Software Engineer increases our work level? Does it give more respect profession-wise?
As our discipline evolves, we have had many names from programmers, to software developers, software engineers, or even wizards!</description></item><item><title>Code reviews or understanding the code</title><link>https://diegojromerolopez.github.io/blog/2023/05/code-reviews-or-understanding-the-code/</link><pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/05/code-reviews-or-understanding-the-code/</guid><description>Code reviews or understanding the code How would you do a code review? Only by reading the code changes or do you thing you need to actually run the code, and what is more important, fully understand the modifications?
A tale of two code review cultures Let&amp;rsquo;s compare the two following environments:
Slow but safe team Imagine a team were reviews are done by several members. There is a focus on the detail, PRs are slow to be merged as they are improved several times before the final merge.</description></item><item><title>Don't work more than enough</title><link>https://diegojromerolopez.github.io/blog/2023/05/dont-work-more-than-enough/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/05/dont-work-more-than-enough/</guid><description>Don&amp;rsquo;t work more than enough Sometimes we push ourselves to the max. maybe because it is there are some deadlines when we are not going to be able to release the new version, maybe it is because our life outside work is not good enough or maybe because we are excited to be working in such a company/technology/team.
However, our mental health is going to be damaged by overworking. The question is not how much, but when we are going to get burned out by overworking.</description></item><item><title>Bike sheding in merge reviews</title><link>https://diegojromerolopez.github.io/blog/2023/04/bike-sheding-in-merge-reviews/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/04/bike-sheding-in-merge-reviews/</guid><description>Bike sheding in merge reviews Focusing on the important things is a crucial matter. When trying to solve a problem, sometimes we subconsciously focus on the easy part, the known part, the part we know we can tackle, and forget about the other parts. The hard parts.
Prelude Humans are falible, we know that we are not as rational, impartial and intelligent as we like. We are full of flaws.</description></item><item><title>Git History in PRs</title><link>https://diegojromerolopez.github.io/blog/2023/04/git-history-in-prs/</link><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/04/git-history-in-prs/</guid><description>Git History in PRs Suppose you have a big feature, and you are creating a pull-request with all your changes. How do you organize the changes? Only one commit? One per sub-feature or sub-fix? How do you make that division? Or maybe you could organize the commits in a way that is helpful for reviewers&amp;hellip; But how? This post try to show different approaches I have found during my years in the workforce.</description></item><item><title>Open Source dependencies in software projects</title><link>https://diegojromerolopez.github.io/blog/2023/04/open-source-dependencies-in-software-projects/</link><pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/04/open-source-dependencies-in-software-projects/</guid><description>Open Source dependencies in software projects Most of the foundations of current commercial software projects are open source. But what happens when an open source project becomens unmaintained?
Dependencies, dependencies everywhere! Most software projects have a miriad of depedendencies. Why? Because we (as software engineers) are not going to reinvent the wheel. Having your software depend on a well-tested, maintained, and supported is a bliss. It saves you time, and work very easily: you only have to be aware of two things:</description></item><item><title>FOSDEM 2023</title><link>https://diegojromerolopez.github.io/blog/2023/02/fosdem-2023/</link><pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/02/fosdem-2023/</guid><description>FOSDEM 2023 Past week I assisted the FOSSDEM 2023 conference in Brussels. It was two days of talks of different topics like programming languages, containers, security, etc. It was a blast! I am these days watching the videos of the talks I could not see in person
My advice for future FOSDEMs Travel Pack light. Do not bring a suitcase, bring a 40L backpack with a couple of change of clothes.</description></item><item><title>Dockerfile stages must have a command</title><link>https://diegojromerolopez.github.io/blog/2023/01/dockerfile-stages-must-have-a-command/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/01/dockerfile-stages-must-have-a-command/</guid><description>Dockerfile stages must have a command In multi-stage Dockerfile, you have to be careful for what stages you run. Want to avoid having misteriously exit 0 errors in containers? Add a CMD at the end of the Dockerfile stage with some dummy command like
CMD [&amp;#34;/bin/bash&amp;#34;, &amp;#34;echo&amp;#34;, &amp;#34;Command for stage X&amp;#34;]Any stage that has no command will exit without informing the user of what happened. This could cause some mysterious errors if you are getting up all containers and not overwritting the command of the ones that have none.</description></item><item><title>Use the builder stage pattern in Dockerfiles</title><link>https://diegojromerolopez.github.io/blog/2023/01/use-the-builder-stage-pattern-in-dockerfiles/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/01/use-the-builder-stage-pattern-in-dockerfiles/</guid><description>Use the builder stage pattern in Dockerfiles Most of the time, some libraries that we install in a docker image are only used for the construction of our executables. Could we just not include in our final docker image?
Docker images should be minimal As we saw in our previous post, docker images should be minimal for several reasons, but the aim is to reduce the cost of the transference of the docker image.</description></item><item><title>Reduce the size of your builder images</title><link>https://diegojromerolopez.github.io/blog/2023/01/reduce-the-size-of-your-builder-images/</link><pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/01/reduce-the-size-of-your-builder-images/</guid><description>Reduce the size of your builder images Docker images should have a small size. For example, Alpine Linux images have a mere 50MB of size, debian-slim is 50-60MB of size. Why do we seek a small size footprint? One reason is simply because the docker images are usually pushed to, and download from, docker repositories like dockerhub or other private docker repositories.
Use a small base image Alpine and debian-slim-stable are like 50MB.</description></item><item><title>Don't be Percival</title><link>https://diegojromerolopez.github.io/blog/2022/12/dont-be-percival/</link><pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2022/12/dont-be-percival/</guid><description>Don&amp;rsquo;t be Percival Percival is a mythologic figure, a mighty knight associated with King Arthur, the knights of the round table, and the search for the grail. How is the myth related with starting working in a new team?
The myth In Chrétien De Troyes' poem The Story of the Grail, Percival, a young boy that dreams of becoming a knight lives in a farm with his mother. He descends from a long tradition of knights (his deceased father and grandfather were knights) but he does not know.</description></item><item><title>Fail fast and often</title><link>https://diegojromerolopez.github.io/blog/2022/12/fail-fast-and-often/</link><pubDate>Sat, 17 Dec 2022 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2022/12/fail-fast-and-often/</guid><description>Fail fast and often Being fail-tolerant is valued in organizations as in a changing world where requirements, technologies or even team members can change from one day to the next, having adaptative capacities is gold.
Wait, what are you talking about? I am talking about having the ability to prioritize our work as developers. Everything has not the same importance and our resources are finite.
You have to know what is the aim of your organization.</description></item><item><title>Override docker-compose.yml files</title><link>https://diegojromerolopez.github.io/blog/2022/12/override-docker-compose.yml-files/</link><pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2022/12/override-docker-compose.yml-files/</guid><description>Override docker-compose.yml files Sometimes we want to have different versions of docker-compose.yml files (one for production and one for development). Each environment has their own characteristics (slightly different images for example) we show here a good way to override sections of a docker-compose.yml file easily.
Why? Sometimes we have several environments that share almost all docker configuration. Having a common docker-compose.yml file and several docker-compose.override.yml files is a great way to manage your service configurations.</description></item><item><title>Actual integration tests</title><link>https://diegojromerolopez.github.io/blog/2022/11/actual-integration-tests/</link><pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2022/11/actual-integration-tests/</guid><description>Many times we have some piece of code that is tested but is still failing in production. How is that possible? Is that because of bad tests or we have a greater hidden issue?
Protect your vital functionality with integration tests Integration tests are the best way make sure that a functionality does not degradate when adding new features.
What are integration tests Integration tests are tests that check a full feature of the project.</description></item><item><title>Add changes to your last commit</title><link>https://diegojromerolopez.github.io/blog/2022/11/add-changes-to-your-last-commit/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2022/11/add-changes-to-your-last-commit/</guid><description>Have you ever created a commit with a meaningful message and, later wanted to add or modify something to it? And what about if you pushed that commit? Here we are going to see how you add changes to a commit, independently of if it was pushed or not.
How-to Let&amp;rsquo;s suppose we have just pushed a commit and we want to add another change to it. This process is called amend.</description></item><item><title>Rewrite git branch history</title><link>https://diegojromerolopez.github.io/blog/2022/11/rewrite-git-branch-history/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2022/11/rewrite-git-branch-history/</guid><description>Rewrite your git branch history Ever had a pushed branch that is completed and ready for review but the git history is too long and full of commits wit.
How to The process is very clear. You only have to get the changes, move your point to the branch you want to merge (usually master), unstage everything, creating new committs, and force push the changes.
Let us see the process step by step:</description></item><item><title>EyesOnly</title><link>https://diegojromerolopez.github.io/blog/2022/11/eyesonly/</link><pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2022/11/eyesonly/</guid><description>Secrets are usually involuntary leaked by developers. Sometimes they are sent to external services like or written in a log by accident. Would not be useful to have a tool to limit the access to secrets? Enter EyesOnly.
EyesOnly: a package to limit access to secrets Dealing last years with containerazing applications has left me thinking in how we are passing some secrets as environment variables to the container. This is standard practice by the Cloud Native practitioners.</description></item><item><title>Allow writing of files in docker in Linux</title><link>https://diegojromerolopez.github.io/blog/2022/10/allow-writing-of-files-in-docker-in-linux/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2022/10/allow-writing-of-files-in-docker-in-linux/</guid><description>Docker is a container system that allow developers to have a common environment to develop and SRE/devops to have machine-independent deployment process.
Allow writing of files in docker in Linux I have been working on a small project in Python: functainer. The goal of this project is to provide a Python package to run functions in docker seamlessly: you only will docker and Python to run it.
Anyway, that project uses files as a mean of communication, i.</description></item><item><title>Asking and receiving feedback on your software project</title><link>https://diegojromerolopez.github.io/blog/2021/07/asking-and-receiving-feedback-on-your-software-project/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2021/07/asking-and-receiving-feedback-on-your-software-project/</guid><description>Introduction A month ago I asked the HN Community for some feedback about my project: Gelidum.
The experience was very positive and I have learned that asking for feedback in a software project is crucial.
Why feedback is important? We know that feedback is important because it gives us a different point of view about a matter or in my case, a project.
But, feedback is not limited to giving different points of view.</description></item><item><title>Immutability</title><link>https://diegojromerolopez.github.io/blog/2021/06/immutability/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2021/06/immutability/</guid><description>Introduction In this post I will explain the rationale about working with immutable objects and will present a personal project I&amp;rsquo;ve been working on the last few days: Gelidum.
La nevada by Francisco de Goya
Why immutability? Nowadays, most processors have some kind of parallelism or concurrency embedded in themselves. Single-flow-execution software is limited by the lowest speed unit in the system. There are some solutions that try to hide the wait for these slow sub-systems by computing in other execution-flows (threads or processes).</description></item><item><title>Ethical issues of Artificial Intelligence</title><link>https://diegojromerolopez.github.io/blog/2021/01/ethical-issues-of-artificial-intelligence/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2021/01/ethical-issues-of-artificial-intelligence/</guid><description>Introduction There is a mooc in the University of Helsinki about the ethics of artificial intelligence. I just started it and it&amp;rsquo;s great.
The triumph of technicism Us engineers tend to think that there is no problem (technical or else) that cannot be resolved by technological means. That&amp;rsquo;s called technicism.
Usually that&amp;rsquo;s right for small-scale problems or systems, but in the case of artificial intelligence, or being more precise machine learning that&amp;rsquo;s not true.</description></item><item><title>What is the most useful skill for software engineers?</title><link>https://diegojromerolopez.github.io/blog/2020/02/what-is-the-most-useful-skill-for-software-engineers/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2020/02/what-is-the-most-useful-skill-for-software-engineers/</guid><description>What is the most useful skill for software engineers? Programming? Algorithms? Knowing many language or the internals of some languages? No.
The best skill for a software engineer is knowing how to write well. There are some studies that establish a relationship between language skills and programming skills. It seems having strong language skills is better than being good at math when talking about developing software.
I can imagine that that&amp;rsquo;s because communication is a foundation of software engineering.</description></item><item><title>Conventions</title><link>https://diegojromerolopez.github.io/blog/2020/01/conventions/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2020/01/conventions/</guid><description>Conventions are what build our society.
Nobody, but you&amp;rsquo;ll get my point along this post.
Conventions Having the same language is better than having different dialects or languages when speaking of the same thing.
## Write the code to make it obvious
Every software engineer develops an unique style of coding through their career. Usually they starts coding tangled code that is extremely difficult to understand to anybody but theyself. Later you get to the point where you are unable to understand your own code, and began to wonder how is that possible.</description></item><item><title>Job searching successfully</title><link>https://diegojromerolopez.github.io/blog/2019/08/job-searching-successfully/</link><pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2019/08/job-searching-successfully/</guid><description>Pursuit new things. Be challenged. Be surrounded by people that inspires you.
Job searching successfully This post is totally my personal opinion so if you don&amp;rsquo;t agree with it, don&amp;rsquo;t worry, there are multiple types of software engineers/developers and all of them are nedeed by the society.
I have been looking for a job for a while, doing some interviews checking on some job postings and have successfully landed a new job.</description></item><item><title>What I learned this 2018</title><link>https://diegojromerolopez.github.io/blog/2018/12/what-i-learned-this-2018/</link><pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2018/12/what-i-learned-this-2018/</guid><description>You never stop learning. Embrace learning new things.
2018 recap Machine learning Learning about Machine Learning had been a not-accomplished stepping stone in my career. Joining some Kaggle competitions and read other&amp;rsquo;s people code makes improves your abilities.
Wonderful Sci-kit and pandas libraries make use of ML algorithms easy and neat.
Ruby Having not used Ruby (albeit many years ago in my MRes. programme I programmed some basic scripts), it was funny to learn its peculiarities and of course, its dark corners.</description></item><item><title>The value of open source software</title><link>https://diegojromerolopez.github.io/blog/2017/06/the-value-of-open-source-software/</link><pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2017/06/the-value-of-open-source-software/</guid><description>I have some open source projects in my github account. Some of them are currently used by my ex-employer in several projects. Why should an organization have to open source some of its software? Let&amp;rsquo;s talk about it.
Dissipating some doubts about software quality Having published your code in public allow many users to take a look to your code and (if it&amp;rsquo;s good) to dissipate its doubts about if it pays using it or not.</description></item><item><title>To test or not to test</title><link>https://diegojromerolopez.github.io/blog/2016/04/to-test-or-not-to-test/</link><pubDate>Sun, 03 Apr 2016 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2016/04/to-test-or-not-to-test/</guid><description>Introduction Some years ago I did not use any tests. We were cowboys in CodeWest where only fearful and strong people survive.
Sometimes we tested some actions and assumed that everything else worked fine. But for the most part, code where developed almost like our sub-conscience dictated us what to type: we were guided by instinct.
Of course, users of my applications were not so amused by this when they found software faulted and had to wait to me to repair it.</description></item><item><title>Refactoring</title><link>https://diegojromerolopez.github.io/blog/2016/03/refactoring/</link><pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2016/03/refactoring/</guid><description>Introduction Software is not a static element in a business. It evolves as business needs evolve. How can we make changes in software and keep high quality or, even better, not degrading it as we develop functionality?
Refactoring Refactoring is the process of changing code structure for the better while keeping the same functionality. It should be a continuos activity made during software development, with the aim of easing maintainability of software.</description></item><item><title>Waterfall process model is harmful</title><link>https://diegojromerolopez.github.io/blog/2016/02/waterfall-process-model-is-harmful/</link><pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2016/02/waterfall-process-model-is-harmful/</guid><description>Introduction Waterfall model is a development process based on doing software development processes one after another and not looking back.
Here is a simple diagram (from Waterfall model article in Wikipedia) of that model:
Waterfall model That is it supposes we are infallible and the client is infallible so each phase is perfect and serves well enough the next.
Issues with waterfall model Waterfall process model suffered a total criticism by Winston W.</description></item><item><title>Project saboteurs</title><link>https://diegojromerolopez.github.io/blog/2016/02/project-saboteurs/</link><pubDate>Sat, 13 Feb 2016 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2016/02/project-saboteurs/</guid><description>Introduction You have just been appointed leader of a new fascinating project. Hard years working in boring tasks have paid off. You are excited before your big day: your first meeting with your client (the owner of the business) and some other stakeholders (managers and other employees of the business).
Sabotage So the meeting starts. Relationship with the business owner is smooth and you begin to write notes about software requirements, current system limitations, technologies&amp;hellip; You know that you&amp;rsquo;ll have more than enough information to make the first requirement document.</description></item><item><title>Self-improvement</title><link>https://diegojromerolopez.github.io/blog/2016/01/self-improvement/</link><pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2016/01/self-improvement/</guid><description>The rules of the game have changed During many years, society expected you to graduate and find a job you kept until your retirement. Not many people changed jobs and only professions like medical doctors and lawyers keep studying and improving their skills.
Now the rules of the game have changed and nobody expects that almost from any profession. Maybe you are a baker and expect to use the same ingredients and make the same bread over and over again, but your clients can change or acquire new tastes!</description></item><item><title>Agile project management</title><link>https://diegojromerolopez.github.io/blog/2016/01/agile-project-management/</link><pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2016/01/agile-project-management/</guid><description>Software Engineering is a special type of Engineering During too much time Software Engineering has been molded as a traditional Engineering, with the same terms and ideas that came from this disciplines. But they failed.
Firstly, Software Engineering has an immaterial final product. It is not a bridge, a road, or a mine for example. Thus, software engineers works with ideas more than anything else.
Thus, traditional engineers are limited by Physics laws while software engineers are only limited by the computational model they use and by the power of the machines their software run.</description></item><item><title>Literate programming</title><link>https://diegojromerolopez.github.io/blog/2015/12/literate-programming/</link><pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2015/12/literate-programming/</guid><description>Donald E. Knuth coined the term Literate programming in this paper he wrote almost 40 years ago.
Knuth wrote a tool called WEB as a demonstration of what Literate Programming should be. This tool would understand Pascal and TeX code, using Pascal code to create a binary executable and using TeX code to compile its documentation file. Pascal code would be a bit different because of the use of predefined macros and it would be interleaved by TeX code describing what actions execute.</description></item><item><title>Out of the tar pit</title><link>https://diegojromerolopez.github.io/blog/2015/09/out-of-the-tar-pit/</link><pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2015/09/out-of-the-tar-pit/</guid><description>&amp;ldquo;Tar pit&amp;rdquo; is an idiom used since 1970s based on the similarity between software complexity and tar pits trapping engineers and animals (resp.).
Out of the tar pit is a paper that analyzes the causes of this complexity and classifies it in several categories. The authors also analyzes the approaches that each type of programming technique uses to sove this complexity problem.
But the most important contribution the authors do is giving a solution in the form of a new paradigm of computer programming.</description></item><item><title>Software construction</title><link>https://diegojromerolopez.github.io/blog/2015/08/software-construction/</link><pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2015/08/software-construction/</guid><description>In my voyage from a simply Software Engineer to a master in Software Engineering I&amp;rsquo;m reading several books. Thus, I&amp;rsquo;m posting in this blog whatever thoughts appear in my mind about Software Developing.
I&amp;rsquo;m several chapters in Code Complete 2nd Ed. of Steve McConnel and I&amp;rsquo;m amazed by the knowledge that it contains. As time goes by I will update this blog with more information about my findings.
Specially I&amp;rsquo;ve been struck by one basic principle: Software construction is the only activity that is warrantied to be made in a software development project.</description></item><item><title>Peopleware</title><link>https://diegojromerolopez.github.io/blog/2015/08/peopleware/</link><pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2015/08/peopleware/</guid><description>I&amp;rsquo;ve just finished reading Tom De Marco &amp;amp; Timothy Lister&amp;rsquo;s Peopleware and I feel like this book should be recommended to all new Software Engineer graduates. Let me put some light in this matter.
I&amp;rsquo;ve been working for 8 years in a startup and none of my formal education in the University prepared me for what I was going to experiment. Software Engineering is a social discipline (we work in teams) but in my Computer Engineering degree1 there are no management or organization courses.</description></item><item><title>Progress towards and engineering discipline of software by Mary Shaw</title><link>https://diegojromerolopez.github.io/blog/2015/08/progress-towards-and-engineering-discipline-of-software-by-mary-shaw/</link><pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2015/08/progress-towards-and-engineering-discipline-of-software-by-mary-shaw/</guid><description>Several days ago, I watched this videotalk of Mary Shaw that tried to give an answer to the question is Software Engineering an Engineering discipline yet?
Dr. Shaw makes a parallelism with Civil Engineering that started as a empirical discipline and, thanks to strong scientific foundations, evolved to what we could call full engineering.
Software Engineering is not there yet. It needs more work and professionalization. Many of the so-called Software Engineers have no software engineering knowledge and/or skills and therefore software disasters happens.</description></item><item><title>Concurrency and third party libraries</title><link>https://diegojromerolopez.github.io/blog/2015/08/concurrency-and-third-party-libraries/</link><pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2015/08/concurrency-and-third-party-libraries/</guid><description>Last Friday, one of my mates had a strange error in his code: incoherent an unrepeatable results arise en each execution.
His code (Python) was concurrent code and each thread used several libraries (BeautifulSoup41 was one of them) which they were not thread-safe. What does it mean? It means we cannot assure that atomicity is achieved in some operations executed by the threads, effectively sharing some data that must not be shared.</description></item><item><title>Managing clients</title><link>https://diegojromerolopez.github.io/blog/2015/07/managing-clients/</link><pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2015/07/managing-clients/</guid><description>The Players It&amp;rsquo;s not a secret that software engineers prefer a clean and completed specification than meeting with clients.
We tend to think that meetings are a waste of time and many of our colleagues are not very fond of what is called soft skills.
On the other side, we have some clients that have no idea about software and want the changes in their platform now.
What is all of that?</description></item><item><title>Real software architecture</title><link>https://diegojromerolopez.github.io/blog/2015/03/real-software-architecture/</link><pubDate>Tue, 03 Mar 2015 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2015/03/real-software-architecture/</guid><description>Simon Brown is an independent software consultant from Jersey (UK) and gave this talk about Software Architecture in GOTO Amsterdam 2014.
This talk delights me in several ways. First, Simon show us several common problems that happens in many software companies: diagrams of the software are not synchronized with code because. That is, we design some type of software architecture but we don&amp;rsquo;t follow our own path when coding.</description></item><item><title>Back to basics, the mythical man-month</title><link>https://diegojromerolopez.github.io/blog/2014/11/back-to-basics-the-mythical-man-month/</link><pubDate>Tue, 04 Nov 2014 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2014/11/back-to-basics-the-mythical-man-month/</guid><description>Frederick P. Brooks is what I&amp;rsquo;d call a true pioneer.
Without any existing knowledge and only his own experience in the &amp;ldquo;tar pit&amp;rdquo; (as himself call this software development world), he distilled some universal truths of the Software Engineering world. So, the Mythical Man-Month is a summary of his ideas.
This book is a night stand book, that is, you cannot hope to end it in a few days. You have to read slowly, thinking as a 60s software developer, with their limited tools and machines to fully understand this book.</description></item><item><title>About me</title><link>https://diegojromerolopez.github.io/page/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/page/about/</guid><description>Leer en español
I&amp;rsquo;m a Senior Software Engineer at Flywire, working in Engineering Productivity. Until September 2022 I was working at Telefónica, in Aura&amp;rsquo;s cognitive team. I&amp;rsquo;m also the former head of tecnology at Bufete de Marketing (now inteliens), former developer at Drivies, and intelligenia (now part of Nazaríes IT). I&amp;rsquo;m passionate about learning new things and testing new technologies.
Apart from work, I like jogging, astronomy, history and reading books.</description></item></channel></rss>