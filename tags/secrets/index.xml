<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>secrets on Diego J.'s Software Tar Pit</title><link>https://diegojromerolopez.github.io/tags/secrets/</link><description>Recent content in secrets on Diego J.'s Software Tar Pit</description><generator>Hugo -- gohugo.io</generator><managingEditor>diegojromerolopez@gmail.com (Diego J. Romero-L贸pez)</managingEditor><webMaster>diegojromerolopez@gmail.com (Diego J. Romero-L贸pez)</webMaster><lastBuildDate>Sat, 12 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://diegojromerolopez.github.io/tags/secrets/index.xml" rel="self" type="application/rss+xml"/><item><title>How to manage docker secrets</title><link>https://diegojromerolopez.github.io/blog/2023/08/how-to-manage-docker-secrets/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-L贸pez)</author><guid>https://diegojromerolopez.github.io/blog/2023/08/how-to-manage-docker-secrets/</guid><description>How to manage docker secrets The product that is produced by most software developer teams is a docker image. How can be sure that we are not leaking secrets in docker images? If we include them as building arguments for sure they are going to be stored in the own image. Is there any way to avoid having them inside the docker image?
Introduction Suppose you have a docker image that requires a secret, you do not want to include it in the image, but you need during the process of building the image.</description></item><item><title>EyesOnly</title><link>https://diegojromerolopez.github.io/blog/2022/11/eyesonly/</link><pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-L贸pez)</author><guid>https://diegojromerolopez.github.io/blog/2022/11/eyesonly/</guid><description>Secrets are usually involuntary leaked by developers. Sometimes they are sent to external services like or written in a log by accident. Would not be useful to have a tool to limit the access to secrets? Enter EyesOnly.
EyesOnly: a package to limit access to secrets Dealing last years with containerazing applications has left me thinking in how we are passing some secrets as environment variables to the container. This is standard practice by the Cloud Native practitioners.</description></item></channel></rss>