<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Diego J.'s Software Tar Pit</title><link>https://diegojromerolopez.github.io/tags/python/</link><description>Recent content in python on Diego J.'s Software Tar Pit</description><generator>Hugo -- gohugo.io</generator><managingEditor>diegojromerolopez@gmail.com (Diego J. Romero-L贸pez)</managingEditor><webMaster>diegojromerolopez@gmail.com (Diego J. Romero-L贸pez)</webMaster><lastBuildDate>Sun, 06 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://diegojromerolopez.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Immutability</title><link>https://diegojromerolopez.github.io/blog/2021/06/immutability/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-L贸pez)</author><guid>https://diegojromerolopez.github.io/blog/2021/06/immutability/</guid><description>Introduction In this post I will explain the rationale about working with immutable objects and will present a personal project I&amp;rsquo;ve been working on the last few days: Gelidum.
La nevada by Francisco de Goya
Why immutability? Nowadays, most processors have some kind of parallelism or concurrency embeded in themselves. Single-flow-execution software is limited by the lowest speed unit in the system. There are some solutions that try to hide the wait for these slow sub-systems by computing in other execution-flows (threads or processes).</description></item><item><title>Concurrency and third party libraries</title><link>https://diegojromerolopez.github.io/blog/2015/08/concurrency-and-third-party-libraries/</link><pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-L贸pez)</author><guid>https://diegojromerolopez.github.io/blog/2015/08/concurrency-and-third-party-libraries/</guid><description>Last friday, one of my mates had a strange error in his code: incoherent an irrepetible results arise en each execution.
His code (Python) was concurrent code and each thread used several libraries (BeautifulSoup41 was one of them) which they were not thread-safe. What does it mean? It means we cannot assure that atomicity is achieved in some operations executed by the threads, effectively sharing some data that must not be shared.</description></item></channel></rss>