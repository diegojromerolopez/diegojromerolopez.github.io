<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>testing on Diego J.'s Software Tar Pit</title><link>https://diegojromerolopez.github.io/tags/testing/</link><description>Recent content in testing on Diego J.'s Software Tar Pit</description><generator>Hugo -- gohugo.io</generator><managingEditor>diegojromerolopez@gmail.com (Diego J. Romero-López)</managingEditor><webMaster>diegojromerolopez@gmail.com (Diego J. Romero-López)</webMaster><lastBuildDate>Sat, 07 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://diegojromerolopez.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>The testing pyramid</title><link>https://diegojromerolopez.github.io/blog/2025/06/the-testing-pyramid/</link><pubDate>Sat, 07 Jun 2025 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2025/06/the-testing-pyramid/</guid><description>The test pyramid This post revisit one of my favorite topics: testing. We are going to delve into what are the different types of tests that you should do in your software to have some assurance about your code.
Introduction I wrote some time ago a post about the difference between unit and integration testing, and while re-reading it today I was not convinced that it was clear enough.
Integration tests is a concept that has been used many times in different environments and at different levels, so I want to give a proper definition of each one of the test types at project and system level.</description></item><item><title>How to write a good unit test</title><link>https://diegojromerolopez.github.io/blog/2025/04/how-to-write-a-good-unit-test/</link><pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2025/04/how-to-write-a-good-unit-test/</guid><description>How to write a good unit test This post provides some guidelines about how to write a good unit test. There are some examples in Python with unittest.
Introduction In my last post I wrote about software quality not being taken seriously sometimes.
Tests are a good part of the software quality so I wanted to write a bit about the testing effort we should be doing in our code.</description></item><item><title>Actual integration tests</title><link>https://diegojromerolopez.github.io/blog/2022/11/actual-integration-tests/</link><pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2022/11/actual-integration-tests/</guid><description>Many times we have some piece of code that is tested but is still failing in production. How is that possible? Is that because of bad tests or we have a greater hidden issue?
Protect your vital functionality with integration tests Integration tests are the best way make sure that a functionality does not degradate when adding new features.
What are integration tests Integration tests are tests that check a full feature of the project.</description></item><item><title>To test or not to test</title><link>https://diegojromerolopez.github.io/blog/2016/04/to-test-or-not-to-test/</link><pubDate>Sun, 03 Apr 2016 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2016/04/to-test-or-not-to-test/</guid><description>Introduction Some years ago I did not use any tests. We were cowboys in CodeWest where only fearful and strong people survive.
Sometimes we tested some actions and assumed that everything else worked fine. But for the most part, code where developed almost like our sub-conscience dictated us what to type: we were guided by instinct.
Of course, users of my applications were not so amused by this when they found software faulted and had to wait to me to repair it.</description></item></channel></rss>