<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>software on Diego J.'s Software Tar Pit</title><link>https://diegojromerolopez.github.io/tags/software/</link><description>Recent content in software on Diego J.'s Software Tar Pit</description><generator>Hugo -- gohugo.io</generator><managingEditor>diegojromerolopez@gmail.com (Diego J. Romero-López)</managingEditor><webMaster>diegojromerolopez@gmail.com (Diego J. Romero-López)</webMaster><lastBuildDate>Sat, 05 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://diegojromerolopez.github.io/tags/software/index.xml" rel="self" type="application/rss+xml"/><item><title>How to write a good unit test</title><link>https://diegojromerolopez.github.io/blog/2025/04/how-to-write-a-good-unit-test/</link><pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2025/04/how-to-write-a-good-unit-test/</guid><description>How to write a good unit test This post provides some guidelines about how to write a good unit test. There are some examples in Python with unittest.
Introduction In my last post I wrote about software quality not being taken seriously sometimes.
Tests are a good part of the software quality so I wanted to write a bit about the testing effort we should be doing in our code.</description></item><item><title>Software quality is not negotiable</title><link>https://diegojromerolopez.github.io/blog/2025/03/software-quality-is-not-negotiable/</link><pubDate>Sat, 15 Mar 2025 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2025/03/software-quality-is-not-negotiable/</guid><description>Software quality is not negotiable From a conversation from one of the best software engineers I have had the please to work with, I heard the following sentence: software quality is not negotiable! And that is one of the axioms of our profession.
Why software quality is seen as optional? Software developers/engineers come from different backgrounds The world of software has no barrier entry. People with different backgrounds can start working as software developers or engineers.</description></item><item><title>The runtime type-checking operator in TypeScript</title><link>https://diegojromerolopez.github.io/blog/2024/12/the-runtime-type-checking-operator-in-typescript/</link><pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/12/the-runtime-type-checking-operator-in-typescript/</guid><description>The runtime type-checking operator in TypeScript I have been working with TypeScript for a while but for sure I am not an expert in the language (I feel more comfortable with Python).
I like the idea of type-safe but limiting the static type checking process can make you confident about what you are getting from outside sources, and if you do not trust those sources (you should NOT), you would need to include a lot of repetitive checks any time we read data from the outside.</description></item><item><title>Don't use singletons</title><link>https://diegojromerolopez.github.io/blog/2024/11/dont-use-singletons/</link><pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/11/dont-use-singletons/</guid><description>Don&amp;rsquo;t use singletons The Singleton pattern is one of the patterns that appeared in the Design Patterns book by Erich Gamma et al..
What is a singleton? The singleton is one design patter to share a resource in a controlled manner in a code base. That resource could be a configuration, a connection or any other global state that should be unique.
How to implement it? There are several ways to implement this, but in Python (for example) you can implement it by making use of the Python metaclasses.</description></item><item><title>My experience in a Platform team</title><link>https://diegojromerolopez.github.io/blog/2024/10/my-experience-in-a-platform-team/</link><pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/10/my-experience-in-a-platform-team/</guid><description>My experience in a platform team This post is going to summarize the main points of my experience while working in a Platform/Productivity team for two years. I also worked as platform engineer many years ago and I have always been eager to create tools that help other engineers.
Giving support is a hard task Developers do not care about the platform their sofware runs, they intend to developed features that product teams require, I mean that is what they should do as developers need to provide value to the company (no question on that).</description></item><item><title>Troubleshooting guides</title><link>https://diegojromerolopez.github.io/blog/2024/02/troubleshooting-guides/</link><pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/02/troubleshooting-guides/</guid><description>Troubleshooting guides Usually software is considered only to be code that is executable, sometimes the documentation is also considered part of software, but are the troubleshooting guides part of software? Are these rulebooks useful for the team that uses, maintains, develop or support the software?
What is a troubleshooting guide? A troubleshooting guide is a rulebook or more explained a collection of items that should help the users navigate through the issues that could happen.</description></item><item><title>New Year's resolutions</title><link>https://diegojromerolopez.github.io/blog/2024/01/new-years-resolutions/</link><pubDate>Sat, 27 Jan 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/01/new-years-resolutions/</guid><description>New Year&amp;rsquo;s resolutions This new year has just started (well 27 days ago), but I have been thinking about what I would like to learn and change during this 2024. Here are my personal thoughts on the matter. I hope they could inspire you to do a similar list.
What I would like to learn Tech Domain Driven Design Code bases I have worked on in my career tend to have some tech debt, and the code structure is very different depending on the developer that created the code.</description></item><item><title>Do what the community does</title><link>https://diegojromerolopez.github.io/blog/2023/12/do-what-the-community-does/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/12/do-what-the-community-does/</guid><description>Do what the community does The other day I had a conversation with a team mate about how to implement different patterns to solve a common issue in a interpreted programming language. He was sugesting using a pattern not used at all by the community that indeed was a cool, interesting, and we could argue that it was a more correct one. I was against that.
Humans are gregarious and tend to form communities &amp;hellip; even programming language communitites!</description></item><item><title>Corporate empathy</title><link>https://diegojromerolopez.github.io/blog/2023/12/corporate-empathy/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/12/corporate-empathy/</guid><description>Corporate empathy In this times of diversity based on gender, ethnical background, culture, etc. Is that enough? Do we have to be careful when talking with other coworker if they do not belong to any of the main categories? Can we say what we would like and in the way we would like? No, we need to treat them empthically.
Communication in the workplace When in every day job, we need to communicate with our coworkers.</description></item><item><title>Rambos</title><link>https://diegojromerolopez.github.io/blog/2023/12/rambos/</link><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/12/rambos/</guid><description>Rambos A one-person army, alone, in the jungle of software, fighting against the peskiest, complex, and soul-eating bugs. He (or she) can work for hours, with a tenacity of a human-hunter machine coming from the future, and his value is sometimes considered 10 times the standard engineer. Your organization depends on this individual. You cross your fingers and pray to your deity to not make you loss this prolific, highly-valued and know-it-all individal contributor.</description></item><item><title>What is your constraint? Mine is anti-work</title><link>https://diegojromerolopez.github.io/blog/2023/11/what-is-your-constraint-mine-is-anti-work/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/11/what-is-your-constraint-mine-is-anti-work/</guid><description>What is your constraint? Mine is anti-work We, as engineers, not only are worried about creating new things, we need to be able to detect the cause of future issues. However, we must not limit ourselves to software, but to the entire software development team organization.
How it all started: The Phoenix Project I was reading the other day the book &amp;ldquo;The Phoenix Project&amp;rdquo;, and while the book is a good read, I was geting bored.</description></item><item><title>Don't touch that</title><link>https://diegojromerolopez.github.io/blog/2023/10/dont-touch-that/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/10/dont-touch-that/</guid><description>Don&amp;rsquo;t touch that Have you ever been told &amp;ldquo;don&amp;rsquo;t touch that, if you modify that piece of code you are going to break anything&amp;rdquo;? How did you react to this comment? Did you feel &amp;ldquo;attacked&amp;rdquo; or simply ignored that piece of advice?
Code jungle Starting a working on a project that has some dark corners is a daunting task but following some guidelines can be useful.
Scary code There is always some scary code, I do not mean code that is difficult to understand, but code that has unintended consequences if modified.</description></item><item><title>Misconceptions about code comments</title><link>https://diegojromerolopez.github.io/blog/2023/09/misconceptions-about-code-comments/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2023/09/misconceptions-about-code-comments/</guid><description>Misconceptions about code comments I have been working in this industry since 2008, and it seems an idea is spreading through software companies: code comments are considered harmful. Is that true?
Where did all start? I think that this idea started with the Clean Code book and the subsequent talks by Robert C. Martin.
Uncle Bob (as people use to call him), has the idea that code should be self-explanatory, and if there is a comment, it is because code is not well structured.</description></item></channel></rss>