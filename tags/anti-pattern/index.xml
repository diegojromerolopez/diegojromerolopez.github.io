<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>anti-pattern on Diego J.'s Software Tar Pit</title><link>https://diegojromerolopez.github.io/tags/anti-pattern/</link><description>Recent content in anti-pattern on Diego J.'s Software Tar Pit</description><generator>Hugo -- gohugo.io</generator><managingEditor>diegojromerolopez@gmail.com (Diego J. Romero-López)</managingEditor><webMaster>diegojromerolopez@gmail.com (Diego J. Romero-López)</webMaster><lastBuildDate>Sun, 10 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://diegojromerolopez.github.io/tags/anti-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Don't use singletons</title><link>https://diegojromerolopez.github.io/blog/2024/11/dont-use-singletons/</link><pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2024/11/dont-use-singletons/</guid><description>Don&amp;rsquo;t use singletons The Singleton pattern is one of the patterns that appeared in the Design Patterns book by Erich Gamma et al..
What is a singleton? The singleton is one design patter to share a resource in a controlled manner in a code base. That resource could be a configuration, a connection or any other global state that should be unique.
How to implement it? There are several ways to implement this, but in Python (for example) you can implement it by making use of the Python metaclasses.</description></item></channel></rss>