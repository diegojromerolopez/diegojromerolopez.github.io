<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unittest on Diego J.'s Software Tar Pit</title><link>https://diegojromerolopez.github.io/tags/unittest/</link><description>Recent content in unittest on Diego J.'s Software Tar Pit</description><generator>Hugo -- gohugo.io</generator><managingEditor>diegojromerolopez@gmail.com (Diego J. Romero-López)</managingEditor><webMaster>diegojromerolopez@gmail.com (Diego J. Romero-López)</webMaster><lastBuildDate>Thu, 13 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://diegojromerolopez.github.io/tags/unittest/index.xml" rel="self" type="application/rss+xml"/><item><title>Patching on setUp in Python's unittest</title><link>https://diegojromerolopez.github.io/blog/2025/02/patching-on-setup-in-pythons-unittest/</link><pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate><author>diegojromerolopez@gmail.com (Diego J. Romero-López)</author><guid>https://diegojromerolopez.github.io/blog/2025/02/patching-on-setup-in-pythons-unittest/</guid><description>Patching on setUp in Python&amp;rsquo;s unittest One of my favorite programming languages is Python, and I think that tests should be a foundational part of software development, so it is not strange that I delve a lot in Python&amp;rsquo;s unittest.
In this post we are going to show how to use unittest.mock.patch not in a decorator (the usual case) but in the setUp method.
Why should you care about this? Well, I have not cared about this after more than a decade of working with python (intermittently), because I was just used to the patch decorator.</description></item></channel></rss>